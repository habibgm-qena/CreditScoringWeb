'use client'

import './styles.css'

import { Spinner } from '@radix-ui/themes'
import axios from 'axios'
import { produce } from 'immer'
import * as React from 'react'
import {
  Label,
  PolarGrid,
  PolarRadiusAxis,
  RadialBar,
  RadialBarChart,
} from 'recharts'
import { toast } from 'sonner'

import { Button } from '@/components/ui/button'
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from '@/components/ui/card'
import type { ChartConfig } from '@/components/ui/chart'
import { ChartContainer } from '@/components/ui/chart'
import { Input } from '@/components/ui/input'
import { Label as UILabel } from '@/components/ui/label'

import { HoverDescription } from './components/hoverCard'
import { SelectInputField } from './components/selectInputField'

const chartConfig = {
  visitors: {
    label: 'Visitors',
  },
  safari: {
    label: 'Safari',
    color: 'hsl(var(--chart-2))',
  },
} satisfies ChartConfig

const inputDescriptions = {
  anualIncome: {
    title: 'Bussiness Anual Income',
    description: 'This field is the total amount of income that is generated by the business annually',
  },
  currentCapital: {
    title: 'Bussiness Current Profit',
    description: 'This field is the total amount of profit that is generated by the business currently',
  },
  anualProfit: {
    title: 'Bussiness Annual Profit',
    description: 'This field is the total amount of profit that is generated by the business annually',
  },
  totalCredit: {
    title: 'Total Credit',
    description: 'This field is the total amount of credit that is given to the business',
  },
  totalDebit: {
    title: 'Total Debit',
    description: 'This field is the total amount of debit that is given to the business',
  },
  netAMT: {
    title: 'Total Net AMT',
    description: 'This field is the total amount of net amount that is given to the business',
  },
  totalRate: {
    title: 'Total Rate',
    description: 'This field is the total rate that is given to the business',
  },
  gender: {
    title: 'Gender',
    description: 'This field is the gender of the business owner',
  },
}

const GENDER = {
  FEMALE: 'FEMALE',
  MALE: 'MALE',
}

const CreditScoringGraph: React.FC = () => {
  const [loading, setLoading] = React.useState(false)
  const [error, setError] = React.useState<string | null>(null)

  const [chartData, setChartData] = React.useState([
    { visitors: 0, fill: 'var(--color-safari)' },
  ])

  const [anualIncome, setAnualIncome] = React.useState('30.5')
  const [currentCapital, setCurrentCapital] = React.useState('500000.0')
  const [anualProfit, setAnnualProfit] = React.useState('10000.0')
  const [totalCredit, setTotalCredit] = React.useState('5.5')
  const [totalDebit, setTotalDebit] = React.useState('15000.0')
  const [netAMT, setNetAMT] = React.useState('20000.0')
  const [totalRate, setTotalRate] = React.useState('2500.0')
  const [gender, setGender] = React.useState(GENDER.MALE)

  const handleSubmit = () => {
    setLoading(true)
    axios.post('/api/creditScoring/getScore', {
      anualIncome,
      currentCapital,
      anualProfit,
      totalCredit,
      totalDebit,
      netAMT,
      totalRate,
      gender: gender === GENDER.FEMALE ? 0 : 1,
    })
      .then(response => {
        const { data } = response
        if (data['combined_credit_score']) {
          setChartData(produce(chartData, draft => {
            draft[0].visitors = data['combined_credit_score']
          }))
        }
      })
      .catch(() => {
        setError('Error scoring credit, please try again')
        toast.error('Error scoring credit', {
          description: 'Please try again later',
          dismissible: true,
        })
      })
      .finally(
        () => setLoading(false),
      )
  }

  return (
    <div className="my-4">
      <div className="header text-center">
        <div className="header-text">
          <span className="header-title">Credit Scoring System</span>
        </div>
      </div>
      <Card className="flex flex-col justify-center p-4">
        <CardContent className="flex-1 pb-0">
          <ChartContainer
            config={chartConfig}
            className="mx-auto aspect-square max-h-[250px]"
          >
            <RadialBarChart
              data={chartData}
              startAngle={0}
              endAngle={(chartData[0].visitors / 850) * 360}
              innerRadius={80}
              outerRadius={110}
            >
              <PolarGrid
                gridType="circle"
                radialLines={false}
                stroke="none"
                className="first:fill-muted last:fill-background"
                polarRadius={[86, 74]}
              />
              <RadialBar dataKey="visitors" background cornerRadius={10} />
              <PolarRadiusAxis tick={false} tickLine={false} axisLine={false}>
                <Label
                  content={({ viewBox }) => {
                    if (viewBox && 'cx' in viewBox && 'cy' in viewBox) {
                      return (
                        <text
                          x={viewBox.cx}
                          y={viewBox.cy}
                          textAnchor="middle"
                          dominantBaseline="middle"
                        >
                          <tspan
                            x={viewBox.cx}
                            y={viewBox.cy}
                            className="fill-foreground text-4xl font-bold"
                          >
                            {chartData[0].visitors.toLocaleString()}
                          </tspan>
                          <tspan
                            x={viewBox.cx}
                            y={(viewBox.cy || 0) + 24}
                            className="fill-muted-foreground"
                          >
                            Score
                          </tspan>
                        </text>
                      )
                    }
                  }}
                />
              </PolarRadiusAxis>
            </RadialBarChart>
          </ChartContainer>
        </CardContent>
        <CardTitle className="justify-self-center self-center font-bold text-xl">Calculate Your Credit Score</CardTitle>
        {error && <span className="text-red-500 text-sm justify-self-center self-center">{error}</span>}

        <div>
          <CardHeader className="pb-0">
            <CardDescription className="text-center w-full text-lg">Personal KYC</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid w-full items-center">
              <div className="flex flex-col">
                <UILabel htmlFor="gender">Gender <HoverDescription title={inputDescriptions.gender.title} description={inputDescriptions.gender.description} /> </UILabel>
                <SelectInputField
                  onvalueChange={(value) => setGender(value)}
                  placeholder="Male"
                  values={[
                    {
                      value: GENDER.FEMALE,
                      placeholder: 'Female',
                    },
                    {
                      value: GENDER.MALE,
                      placeholder: 'Male',
                    },
                  ]}
                />

              </div>

            </div>
          </CardContent>
        </div>
        <div className="flex flex-row flex-wrap max-w-s">

          <div>
            <CardHeader className="pb-4">
              <CardDescription className="w-full text-lg">Transaction Features</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid w-full items-center">
                <div className="flex flex-col ">
                  <UILabel htmlFor="totalCredit"> Total Credit <HoverDescription title={inputDescriptions.totalCredit.title} description={inputDescriptions.totalCredit.description} /> </UILabel>
                  <Input id="totalCredit" type="number" placeholder="5.5" onChange={(e) => { setTotalCredit(e.target!.value) }} />
                </div>
                <div className="flex flex-col ">
                  <UILabel htmlFor="totalDebit">Total Debit <HoverDescription title={inputDescriptions.totalDebit.title} description={inputDescriptions.totalDebit.description} /></UILabel>
                  <Input id="totalDebit" type="number" placeholder="15000.0" onChange={(e) => { setTotalDebit(e.target!.value) }} />
                </div>
                <div className="flex flex-col ">
                  <UILabel htmlFor="name">Total Net AMT <HoverDescription title={inputDescriptions.netAMT.title} description={inputDescriptions.netAMT.description} /> </UILabel>
                  <Input id="netAMT" type="number" placeholder="20000.0" onChange={(e) => { setNetAMT(e.target!.value) }} />
                </div>
                <div className="flex flex-col ">
                  <UILabel htmlFor="name">Total Rate <HoverDescription title={inputDescriptions.totalRate.title} description={inputDescriptions.totalRate.description} /> </UILabel>
                  <Input id="totalRate" type="number" placeholder="2500.0" onChange={(e) => { setTotalRate(e.target!.value) }} />
                </div>
              </div>
            </CardContent>
            <CardFooter />
          </div>

          <div>
            <CardHeader className="pb-4">
              <CardDescription className=" w-full text-lg">Growth Feature</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid w-full items-center">
                <div className="flex flex-col">
                  <UILabel htmlFor="anualIncome">Bussiness Anual Income <HoverDescription title={inputDescriptions.anualIncome.title} description={inputDescriptions.anualIncome.description} /> </UILabel>
                  <Input id="anualIncome" type="number" placeholder="30.5" onChange={(e) => { setAnualIncome(e.target!.value) }} />
                </div>
                <div className="flex flex-col">
                  <UILabel htmlFor="currentCapital">Bussiness Current Profit <HoverDescription title={inputDescriptions.currentCapital.title} description={inputDescriptions.currentCapital.description} /> </UILabel>
                  <Input id="currentCapital" type="number" placeholder="500000.0" onChange={(e) => { setCurrentCapital(e.target!.value) }} />
                </div>
                <div className="flex flex-col">
                  <UILabel htmlFor="annualProfit">Bussiness Annual Profit <HoverDescription title={inputDescriptions.anualProfit.title} description={inputDescriptions.anualProfit.description} /> </UILabel>
                  <Input id="annualProfit" type="number" placeholder="10000.0" onChange={(e) => { setAnnualProfit(e.target!.value) }} />
                </div>
              </div>
            </CardContent>
          </div>
        </div>
        <Button className="w-full fill-background" onClick={handleSubmit} disabled={loading}> {loading ? <><Spinner /> loading</> : <span>Calculate</span>} </Button>
      </Card>

    </div>

  )
}

export default CreditScoringGraph
